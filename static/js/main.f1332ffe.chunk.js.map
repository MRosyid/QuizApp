{"version":3,"sources":["components/Home.js","components/Play.js","components/Stats.js","App.js","index.js"],"names":["Home","Helmet","id","style","textAlign","className","to","Play","props","displayQuestions","questions","state","currQuestion","nextQuestion","previousQuestion","currQuestionIndex","length","answer","setState","numQuestions","prevRandomNum","showOptions","disableBtn","correct","prevState","score","correctAnswers","numAnswered","undefined","endGame","wrong","wrongAnswers","checkAnswer","e","target","innerHTML","toLowerCase","nextClick","prevBtnDis","nextBtnDis","previousClick","quitClick","window","confirm","history","push","hintClick","hints","indexAnswer","options","Array","from","document","querySelectorAll","forEach","option","index","randomNum","Math","round","random","includes","visibility","concat","startTimer","countDownTime","Date","now","interval","setInterval","distance","minutes","floor","seconds","clearInterval","time","alert","playerStats","usedHints","this","onClick","question","optionA","optionB","optionC","optionD","React","Component","Stats","location","stats","toFixed","App","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f1332ffe.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <Fragment>\r\n            <Helmet><title>Quiz App- Home</title></Helmet>\r\n            <div id=\"home\">\r\n                <section>\r\n                    <div style={{ textAlign: 'center'}}>\r\n                        <i className=\"far fa-lightbulb\"></i>\r\n                    </div>\r\n                    <h1>\r\n                        Quiz App\r\n                    </h1>\r\n                    <div className=\"take-button-container\">\r\n                        <Link className=\"take-button\" to=\"/takequiz\"> Take Quiz </Link>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport questions from '../questions.json';\r\n\r\nclass Play extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questions,\r\n            currQuestion: {},\r\n            nextQuestion: {},\r\n            previousQuestion: {},\r\n            answer: '',\r\n            numQuestions: 0,\r\n            numAnswered: 0,\r\n            currQuestionIndex: 0,\r\n            score: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            nextBtnDis: false,\r\n            prevBtnDis: true,\r\n            hints: 5,\r\n            prevRandomNum: [],\r\n            time: {},\r\n        }\r\n        this.interval = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { questions, currQuestion, nextQuestion, previousQuestion } = this.state;\r\n        this.displayQuestions(questions, currQuestion, nextQuestion, previousQuestion);\r\n        this.startTimer();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    displayQuestions = (questions = this.state.questions, currQuestion, nextQuestion, previousQuestion) => {\r\n        let { currQuestionIndex } = this.state;\r\n        // Display questions from the questions.json file\r\n        if (this.state.questions && this.state.questions.length) {\r\n            questions = this.state.questions;\r\n            currQuestion = questions[currQuestionIndex];\r\n            nextQuestion = questions[currQuestionIndex + 1];\r\n            previousQuestion = questions[currQuestionIndex - 1];\r\n            const answer = currQuestion.answer;\r\n\r\n            this.setState({\r\n                currQuestion,\r\n                nextQuestion,\r\n                previousQuestion,\r\n                numQuestions: questions.length,\r\n                answer,\r\n                prevRandomNum: [],\r\n            }, () => {\r\n                this.showOptions();\r\n                this.disableBtn();\r\n            })\r\n        }\r\n    }\r\n\r\n    correct = () => {\r\n        // Updating score and move to next question\r\n        this.setState(prevState => ({\r\n            score: prevState.score + 1,\r\n            currQuestionIndex: prevState.currQuestionIndex + 1,\r\n            correctAnswers: prevState.correctAnswers + 1,\r\n            numAnswered: prevState.numAnswered + 1,\r\n        }), () => {\r\n            if (this.state.nextQuestion === undefined){\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currQuestion, this.state.nextQuestion, this.state.previousQuestion)\r\n            }\r\n        })\r\n    }\r\n\r\n    wrong = () => {\r\n        // Updating score and move to next question\r\n        this.setState(prevState => ({\r\n            currQuestionIndex: prevState.currQuestionIndex + 1,\r\n            wrongAnswers: prevState.wrongAnswers + 1,\r\n            numAnswered: prevState.numAnswered + 1,\r\n        }), () => {\r\n            if (this.state.nextQuestion === undefined){\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currQuestion, this.state.nextQuestion, this.state.previousQuestion)\r\n            }\r\n        })\r\n    }\r\n\r\n    checkAnswer = (e) => {\r\n        if (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n            this.correct();\r\n        }\r\n        else {\r\n            this.wrong();\r\n        }\r\n    }\r\n\r\n    nextClick = (e) => {\r\n        if (this.state.nextQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currQuestionIndex: prevState.currQuestionIndex + 1,\r\n            }), () => {\r\n                this.displayQuestions(this.state.state, this.state.currQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            })\r\n        }\r\n    }\r\n\r\n    disableBtn = () => {\r\n        // Disable previous button if there is no previous questions\r\n        if (this.state.previousQuestion === undefined){\r\n            this.setState({\r\n                prevBtnDis: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                prevBtnDis: false\r\n            })\r\n        }\r\n\r\n        // Disable next button if there is no next questions\r\n        if (this.state.nextQuestion === undefined){\r\n            this.setState({\r\n                nextBtnDis: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                nextBtnDis: false\r\n            })\r\n        }\r\n    }    \r\n\r\n    previousClick = (e) => {\r\n        if (this.state.previousQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currQuestionIndex: prevState.currQuestionIndex - 1,\r\n            }), () => {\r\n                this.displayQuestions(this.state.state, this.state.currQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            })\r\n        }\r\n    }\r\n\r\n    quitClick = (e) => {\r\n        if (window.confirm('Are you sure that you want to quit?')) {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    hintClick = () => {\r\n        if (this.state.hints > 0) {\r\n            const options = Array.from(document.querySelectorAll('.option'));\r\n            let indexAnswer;\r\n\r\n            // Search for the answer\r\n            options.forEach((option, index) => {\r\n                if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n                    indexAnswer = index;\r\n                }\r\n            })\r\n\r\n            // Delete random options which are not the answer \r\n            while (true) {\r\n                const randomNum = Math.round(Math.random() * 3);\r\n\r\n                if (randomNum !== indexAnswer && !this.state.prevRandomNum.includes(randomNum)) {\r\n                    options.forEach((option, index) => {\r\n                        if (index === randomNum) {\r\n                            option.style.visibility = 'hidden';\r\n                            this.setState((prevState) => ({\r\n                                hints: prevState.hints - 1,\r\n                                prevRandomNum: prevState.prevRandomNum.concat(randomNum)\r\n                            }))\r\n                        }\r\n                    })\r\n                    break;\r\n                }\r\n                if (this.state.prevRandomNum.length >= 3) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    showOptions = () => {\r\n        const options = Array.from(document.querySelectorAll('.option'));\r\n\r\n        options.forEach(option => {\r\n            option.style.visibility = 'visible';\r\n        })\r\n    }\r\n\r\n    startTimer = () => {\r\n        // Set countdown time\r\n        const countDownTime = Date.now() + 300000;\r\n        this.interval = setInterval(() => {\r\n            const now = new Date();\r\n            const distance = countDownTime - now;\r\n\r\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n            // Alert user is the time is up\r\n            if (distance < 0){\r\n                clearInterval(this.interval);\r\n                this.setState({\r\n                    time: {\r\n                        minutes: 0,\r\n                        seconds: 0,\r\n                    }\r\n                }, () => {\r\n                    this.endGame();\r\n                })\r\n            }\r\n            else{\r\n                this.setState({\r\n                    time: {\r\n                        minutes,\r\n                        seconds,\r\n                    }\r\n                })\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    endGame = () => {\r\n        alert('Congratulations, you finished the quiz!');\r\n        \r\n        // Obtain all the stats\r\n        const {state} = this;\r\n        const playerStats = {\r\n            score: state.score,\r\n            numQuestions: state.numQuestions,\r\n            numAnswered: state.numAnswered,\r\n            correctAnswers: state.correctAnswers,\r\n            wrongAnswers: state.wrongAnswers,\r\n            usedHints: 5 - state.hints,\r\n        }\r\n        this.props.history.push('/stats', playerStats);\r\n    }\r\n\r\n    render() {\r\n        const { currQuestion, currQuestionIndex, numQuestions, hints, time } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Quiz Page</title></Helmet>\r\n                <div className=\"questions\">\r\n                    <div className=\"hints-container\">\r\n                        <span>{hints} <i onClick={this.hintClick} className=\"fas fa-exclamation\"></i></span>\r\n                    </div>\r\n                    <div>\r\n                        <p className=\"num-and-timer\">\r\n                            <span>{currQuestionIndex + 1} of {numQuestions}</span>\r\n                            <span>{time.minutes}:{time.seconds} <i className=\"far fa-clock\"></i></span>\r\n                        </p>\r\n                    </div>\r\n                    <h3>{currQuestion.question}</h3>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.checkAnswer} className=\"option\">{currQuestion.optionA}</p>\r\n                        <p onClick={this.checkAnswer} className=\"option\">{currQuestion.optionB}</p>\r\n                    </div>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.checkAnswer} className=\"option\">{currQuestion.optionC}</p>\r\n                        <p onClick={this.checkAnswer} className=\"option\">{currQuestion.optionD}</p>\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                        <button\r\n                        className={\"\" + {\"disable\": this.state.prevBtnDis}} \r\n                        onClick={this.previousClick}>\r\n                            Previous\r\n                        </button>\r\n                        <button\r\n                        className={\"\" + {\"disable\": this.state.nextBtnDis}} \r\n                         onClick={this.nextClick}>\r\n                             Next\r\n                        </button>\r\n                        <button className=\"button\" onClick={this.quitClick}>Quit</button>\r\n                    </div>\r\n                </div>\r\n            </Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Play;","import React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Stats extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            numQuestions: 0,\r\n            numAnswered: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            usedHints: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { state } = this.props.location;\r\n        if (state) {\r\n            this.setState({\r\n                score: (state.score / state.numQuestions) * 100,\r\n                numQuestions: state.numQuestions,\r\n                numAnswered: state.numAnswered,\r\n                correctAnswers: state.correctAnswers,\r\n                wrongAnswers: state.wrongAnswers,\r\n                usedHints: state.usedHints,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { state } = this.props.location;\r\n        let stats;\r\n\r\n        if (state !== undefined) {\r\n            stats = (\r\n                <Fragment>\r\n                    <div className=\"stat-page\">\r\n                        <div>\r\n                            <i className=\"far fa-check-circle\"></i>\r\n                        </div>\r\n                        <h1>Quiz has ended</h1>\r\n                        <div className=\"stats-container\">\r\n                            <h2>Your score: {this.state.score.toFixed(0)}</h2>\r\n\r\n                            <span>Total number of questions: </span>\r\n                            <span className=\"stats\">{this.state.numQuestions}</span><br></br>\r\n\r\n                            <span>Total number of answered questions: </span>\r\n                            <span className=\"stats\">{this.state.numAnswered}</span><br></br>\r\n\r\n                            <span>Total number of correct answers: </span>\r\n                            <span className=\"stats\">{this.state.correctAnswers}</span><br></br>\r\n\r\n                            <span>Total number of wrong answers: </span>\r\n                            <span className=\"stats\">{this.state.wrongAnswers}</span><br></br>\r\n\r\n                            <span>Total number of hints used: </span>\r\n                            <span className=\"stats\">{this.state.usedHints}</span><br></br>\r\n                        </div>\r\n                        <section className=\"stat-btn-container\">\r\n                            <Link className=\"btn\" to=\"/\"> Back to Home</Link>\r\n                            <Link className=\"btn\" to=\"/takequiz\"> Take the quiz again</Link>\r\n                        </section>\r\n                    </div>\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            stats = (\r\n                <section className=\"stat-page\">\r\n                    <div className=\"no-stats\">\r\n                        <h1> No stats available, please take a quiz. </h1>\r\n                        <div className=\"stat-btn-container\">\r\n                            <Link className=\"btn\" to=\"/\"> Back to Home</Link>\r\n                            <Link className=\"btn\" to=\"/takequiz\"> Take the quiz again</Link>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Quiz Summary</title></Helmet>\r\n                {stats}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stats;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Home from './components/Home';\nimport Play from './components/Play';\nimport Stats from './components/Stats';\n\nfunction App() {\n  return (\n  <Router>\n    <Route exact path = {process.env.PUBLIC_URL + '/#/'} component = {Home} />\n    <Route exact path = {process.env.PUBLIC_URL + '/#/takequiz'} component = {Play} />\n    <Route exact path = {process.env.PUBLIC_URL + '/#/stats'} component = {Stats} />\n  </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport './styles/styles.scss';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}